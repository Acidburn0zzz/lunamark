#!/usr/bin/env lua
-- lunamark program

local lunamark = require("lunamark")

local function one_of(ary)
  return function(s)
    for i=1,#ary do
      if ary[i]==s then return true end
    end
    return false, "must be one of: " .. table.concat(ary,", ")
  end
end

local options = {
  "lunamark [options] [file..] - convert text between formats",
   to      = { shortform = "t",
               arg = "format",
               validate = one_of({"html","html5","docbook","latex","context"}),
               description = "Target format"},
   from    = { shortform = "f",
               arg = "format",
               validate = one_of({"markdown"}),
               description = "Source format"},
   strict  = { description = "Disable markdown extensions" },
   output  = { shortform = "o",
               arg = "file",
               description = "Output file" },
   template = { shortform = "T",
                arg = "file",
                description = "Insert output into template" },
   standalone = { shortform = "s",
                  description = "Add header and footer" },
   containers = { description = "Wrap sections in containers" },
   compact = { description = "Omit unnecessary blank lines" },
   minimize = { description = "Omit all unnecessary white space" },
   }

local defaults = {
   to  = "html",
   from = "markdown",
   strict = false,
   containers = false,
   standalone = false,
   compact = false,
   minimize = false
 }

local args = lunamark.cmdopts.getargs(options, defaults)

local reader = lunamark.reader[args.from]
if not reader then
  lunamark.util.err("Unknown reader: " .. tostring(args.from), 3)
end

local writer = lunamark.writer[args.to]
if not writer then
  lunamark.util.err("Unknown writer: " .. tostring(args.to), 5)
end

writer.options.startnum = not args.strict
writer.options.containers = args.containers

if args.minimize then
  writer.containersep = writer.sep.container.minimal
  writer.interblocksep = writer.sep.interblock.minimal
elseif args.compact then
  writer.containersep = writer.sep.container.compact
  writer.interblocksep = writer.sep.interblock.compact
end

local convert = reader(writer,{})
local body, metadata = convert(lunamark.util.get_input(args,4))

io.output(args.output)

if args.standalone and not args.template then
  args.template = "default"
end

if args.template then
  local template = lunamark.util.find_template(args.template, args.to)
  local data = {}
  if metadata then data = metadata end
  data.body = body
  data.timestamp = os.date("%Y-%m-%d %X")
  data.sources = args
  local result = lunamark.util.fill_template(template, data)
  io.write(result)
else
  io.write(body)
end

if not args.template then
  io.write("\n")
end
