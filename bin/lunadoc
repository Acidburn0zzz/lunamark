#!/usr/bin/env lua

--- This program reads a number of source files, scans them
-- for special comment blocks beginning with '---', and writes
-- an HTML file documenting each module to the doc directory.
--
-- There must be blank space between the opening dashes and
-- any following text.
--
-- If the comment block immediately precedes a declaration
-- of a function or variable, the name is extracted automatically.
--
-- Each file is assumed to be a module.  The 'module' keyword need
-- not be used.
--
-- Documentation is parsed as markdown.

local lunamark = require("lunamark")
local cosmo = require("cosmo")

local destdir = "doc"

local writer = lunamark.writer.html.new()

local converter = lunamark.reader.markdown.new(writer,{smart=true})


local function extract_comments(f)
  local commentlines = {}
  local chunks = {}
  local collect = false
  local decl
  io.input(f)
  for l in io.lines() do
    local m = l:match("^%s*%-%-%-%s(.*)")
    if m then
      collect = true
      table.insert(commentlines,m)
    elseif collect then
      local n = l:match("^%s*%-%-%-?%s?(.*)")
      if n then
        table.insert(commentlines,n)
      else
        collect = false
        decl = l:match("function%s+(.-%))") or l:match("([^%s%=]+)%s*=")
        if decl then decl = string.gsub(decl,"M%.","") end  -- strip off M. which puts declaration in module
        -- extract metadata lines
        local thischunk = { lines = {}, author = {}, param = {}, returns = {}, see = {}, name = decl }
        for _,line in ipairs(commentlines) do
          local m, val = line:match("^ ? ? ?@(%a+)[ \t]*(.*)$")
          val = val and writer.string(val)
          if m == "author" then
            table.insert(thischunk.author, val)
          elseif m == "param" then
            local paramname, paramdescr = val:match("(%S*)%s*(.*)")
            table.insert(thischunk.param, { name = paramname, description = paramdescr })
          elseif m == "returns" then
            table.insert(thischunk.returns, val)
          elseif m == "see" then
            table.insert(thischunk.see, val)
          elseif m then
            thischunk[m] = val
          else
            table.insert(thischunk.lines, line)
          end
        end
        thischunk.contents = converter(table.concat(thischunk.lines, "\n"))
        thischunk.id = thischunk.name and thischunk.name:match("^[^%( \t]*")
        thischunk.lines = nil
        table.insert(chunks, thischunk)
        commentlines = {}
      end
    end
  end
  return chunks
end

local template = [[
<html>
<head>
<title>$modname</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" href="lunadoc.css" type="text/css" />
</head>
<body>
<div id="content">
<h1 class="module">$modname</h1>
$chunks[=[
<div id="$id">
<h3 class="declaration">$name</h3>
$contents
$if{ param }[==[
<dl class="param">
$param[===[
<dt>$name</dt>
<dd>$description</dt>
]===]
</dl>
]==]
</div>
]=]
</div>
<div id="index">
$index
</div>
</body>
</html>
]]

local css = [[
body { font-family: Georgia, serif; }
code,pre { font-family: Courier, monospace; }
div#index { position: absolute; left: 1em; top: 1em; width:14em; border-right: 1px solid grey; }
div#content { position: absolute; left: 15em; top: 0em; padding-left: 2em; max-width: 40em; padding-bottom: 1em; }
dl.param
{
        float: left;
        margin: 1em 0;
        padding: 0;
        border-bottom: 1px solid gray;
}

.param dt
{
        clear: left;
        float: left;
        width: 10em;
        margin: 0;
        padding: 5px;
        border-top: 1px solid gray;
        font-weight: bold;
}

.param dd
{
        float: left;
        width: 20em;
        margin: 0;
        padding: 5px;
        border-top: 1px solid #999;
}
]]

local index_table = {}

local function get_modname(s)
  return s:gsub("%.lua$",""):gsub("/",".")
end

for i=1,#arg do
  local modname = get_modname(arg[i])
  table.insert(index_table, "<p><a href=\"" .. modname .. ".html\">" .. modname .. "</a></p>")
end

local index = table.concat(index_table,"\n")

for i=1,#arg do
  local f = arg[i]
  local data = {}
  data["if"] = cosmo.cif  -- this activates the "if" keyword
  data.chunks = extract_comments(f)
  data.index = index
  data.modname = get_modname(f)
  local page = cosmo.fill(template, data)
  local file = io.open(destdir .. "/" .. data.modname .. ".html", "w")
  file:write(page)
  file:close()
end

local file = io.open(destdir .. "/lunadoc.css", "w")
file:write(css)
file:close()
